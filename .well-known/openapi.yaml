openapi: 3.1.0
info:
  title: Jarvis PL Backend API
  version: "0.2.0"
  description: |
    Publiczna specyfikacja API używana przez agenta. 
    Wymagane nagłówki (np. x-admin) są opisane w securitySchemes.

servers:
  - url: https://ai.aneuroasystent.pl
    description: production
  - url: http://localhost:8080
    description: local

paths:
  /:
    get:
      summary: Info o serwisie
      operationId: getRootInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:   { type: boolean }
                  name: { type: string }
                  time: { type: integer, format: int64 }
                  env:  { type: string }

  /health:
    get:
      summary: Healthcheck
      operationId: getHealth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:  { type: boolean }
                  now: { type: integer, format: int64 }

  /auth/status:
    get:
      summary: Status autoryzacji (OAuth)
      operationId: getAuthStatus
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:   { type: boolean }
                  hasAccessToken:  { type: boolean }
                  hasRefreshToken: { type: boolean }
                  expiry:
                    oneOf:
                      - { type: "null" }
                      - { type: integer, format: int64 }

  /auth/url:
    get:
      summary: Pobierz URL logowania do Google (OAuth)
      operationId: getAuthUrl
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string, format: uri }

  /gmail/labels:
    get:
      summary: Lista etykiet Gmail
      operationId: listGmailLabels
      security: [{ adminHeader: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GmailLabel"

  /gmail/messages:
    get:
      summary: Lista wiadomości (minimal)
      operationId: listGmailMessages
      security: [{ adminHeader: [] }]
      parameters:
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
        - in: query
          name: pageToken
          schema: { type: string }
        - in: query
          name: q
          schema: { type: string }
          description: Gmail search query, np. "has:attachment newer_than:365d"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GmailMessageSummary"

  /gmail/threads:
    get:
      summary: Lista wątków (alias do starszych testów)
      operationId: listGmailThreads
      security: [{ adminHeader: [] }]
      parameters:
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
        - in: query
          name: pageToken
          schema: { type: string }
        - in: query
          name: q
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  threads:
                    type: array
                    items:
                      type: object
                      properties:
                        id:        { type: string }
                        historyId: { type: string }
                  nextPageToken: { type: string }

  /gmail/thread:
    get:
      summary: Szczegóły wątku (expand=1 pobiera pełne treści i załączniki)
      operationId: getGmailThread
      security: [{ adminHeader: [] }]
      parameters:
        - in: query
          name: threadId
          required: true
          schema: { type: string }
        - in: query
          name: expand
          schema: { type: boolean, default: false }
          description: >-
            false: metadane; true: pełne treści (HTML/TXT) + attachments/inline.
        - in: query
          name: raw
          schema: { type: boolean, default: false }
          description: >-
            raw=1 pobiera RFC822 per wiadomość (osobne GET /messages/{id}?format=raw).
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GmailThreadDetail"

  /gmail/modify:
    post:
      summary: Dodaj/usuń etykiety na wiadomości
      operationId: modifyGmailMessage
      security: [{ adminHeader: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: string, description: "ID wiadomości" }
                addLabels:
                  type: array
                  items: { type: string }
                  description: "Nazwy etykiet do dodania (zamieniane na labelIds)"
                removeLabels:
                  type: array
                  items: { type: string }
                  description: "Nazwy etykiet do usunięcia (zamieniane na labelIds)"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:       { type: string }
                  threadId: { type: string }
                  labelIds:
                    type: array
                    items: { type: string }

  /calendar/list:
    get:
      summary: Lista wydarzeń w zakresie czasu
      operationId: listCalendarEvents
      security: [{ adminHeader: [] }]
      parameters:
        - in: query
          name: timeMin
          required: true
          schema: { type: string }
          description: ISO8601 (np. 2025-09-07T12:00:00)
        - in: query
          name: timeMax
          required: true
          schema: { type: string }
          description: ISO8601
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CalendarEvent"

  /calendar/create:
    post:
      summary: Utwórz wydarzenie w kalendarzu
      operationId: createCalendarEvent
      security: [{ adminHeader: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CalendarCreateInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CalendarEvent"

  /calendar/notifications:
    post:
      summary: Webhook Google Calendar (loguje, zwraca 200)
      operationId: calendarNotifications
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:     { type: boolean }
                  method: { type: string }

components:
  securitySchemes:
    adminHeader:
      type: apiKey
      in: header
      name: x-admin

  schemas:
    GmailLabel:
      type: object
      properties:
        id:   { type: string }
        name: { type: string }
        type: { type: string }

    GmailMessageSummary:
      type: object
      properties:
        id:       { type: string }
        threadId: { type: string }
        snippet:  { type: string }

    GmailAttachment:
      type: object
      properties:
        filename:      { type: string }
        contentType:   { type: string }
        contentBase64: { type: string, description: "base64" }

    GmailMessageDetail:
      type: object
      properties:
        id:         { type: string }
        threadId:   { type: string }
        labelIds:
          type: array
          items: { type: string }
        snippet:    { type: string }
        internalDate: { type: string }
        headers:
          type: object
          properties:
            from:       { type: string }
            to:         { type: string }
            cc:         { type: string }
            bcc:        { type: string }
            subject:    { type: string }
            date:       { type: string }
            messageId:  { type: string }
            inReplyTo:  { type: string }
        body:
          type: object
          properties:
            html: { type: string }
            text: { type: string }
        attachments:
          type: array
          items: { $ref: "#/components/schemas/GmailAttachment" }
        inline:
          type: array
          items: { $ref: "#/components/schemas/GmailAttachment" }
        hasAttachments:  { type: boolean }
        attachmentsCount:{ type: integer }
        hasInline:       { type: boolean }
        inlineCount:     { type: integer }
        raw:
          oneOf:
            - { type: "null" }
            - { type: string }

    GmailThreadDetail:
      type: object
      properties:
        id:          { type: string }
        historyId:   { type: string }
        snippet:     { type: string }
        messagesCount: { type: integer }
        messages:
          type: array
          items: { $ref: "#/components/schemas/GmailMessageDetail" }

    CalendarCreateInput:
      type: object
      required: [summary, start, end]
      properties:
        summary:     { type: string }
        description: { type: string }
        location:    { type: string }
        start:       { type: string, description: "ISO8601" }
        end:         { type: string, description: "ISO8601" }
        attendees:
          type: array
          items:
            type: object
            properties:
              email: { type: string, format: email }

    CalendarEvent:
      type: object
      properties:
        id:        { type: string }
        summary:   { type: string }
        htmlLink:  { type: string, format: uri }
        location:  { type: string }
        description: { type: string }
        start:     { type: string }
        end:       { type: string }
        attendees:
          type: array
          items:
            type: object
            properties:
              email: { type: string, format: email }
