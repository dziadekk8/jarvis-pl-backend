openapi: 3.1.0
info:
  title: Jarvis PL Backend API
  version: "0.3.0"
  description: |
    Publiczna specyfikacja API używana przez agenta.
    Zabezpieczone końcówki wymagają nagłówka `x-admin` (securitySchemes.adminHeader).

servers:
  - url: https://ai.aneuroasystent.pl
    description: production
  - url: http://localhost:8080
    description: local

paths:
  /:
    get:
      summary: Info o serwisie
      operationId: getRootInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:   { type: boolean }
                  name: { type: string }
                  time: { type: integer, format: int64 }
                  env:  { type: string }
              examples:
                ok:
                  value:
                    ok: true
                    name: jarvis-pl-backend
                    time: 1757258489666
                    env: production

  /health:
    get:
      summary: Healthcheck
      operationId: getHealth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:  { type: boolean }
                  now: { type: integer, format: int64 }
              examples:
                ok:
                  value:
                    ok: true
                    now: 1757258489594

  /auth/status:
    get:
      summary: Status autoryzacji (OAuth)
      operationId: getAuthStatus
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:   { type: boolean }
                  hasAccessToken:  { type: boolean }
                  hasRefreshToken: { type: boolean }
                  expiry:
                    oneOf:
                      - { type: "null" }
                      - { type: integer, format: int64 }
              examples:
                sample:
                  value:
                    authenticated: true
                    hasAccessToken: true
                    hasRefreshToken: true
                    expiry: 1757261291791

  /auth/url:
    get:
      summary: Pobierz URL logowania do Google (OAuth)
      operationId: getAuthUrl
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string, format: uri }
              examples:
                redirect:
                  value:
                    url: "https://accounts.google.com/o/oauth2/v2/auth?client_id=XXX&redirect_uri=https%3A%2F%2Fai.aneuroasystent.pl%2Foauth2%2Fcallback&scope=openid%20profile%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fgmail.modify&response_type=code&access_type=offline&prompt=consent"

  /gmail/labels:
    get:
      summary: Lista etykiet Gmail
      operationId: listGmailLabels
      security: [{ adminHeader: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GmailLabel"
              examples:
                minimal:
                  value:
                    - { id: "INBOX",  name: "INBOX",  type: "system" }
                    - { id: "STARRED", name: "STARRED", type: "system" }
                    - { id: "Label_123", name: "Faktury", type: "user" }

  /gmail/messages:
    get:
      summary: Lista wiadomości (minimal)
      operationId: listGmailMessages
      security: [{ adminHeader: [] }]
      parameters:
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
          example: 10
        - in: query
          name: pageToken
          schema: { type: string }
          example: "Cg4IARIAGAY=" 
        - in: query
          name: q
          schema: { type: string }
          description: Gmail search query, np. "has:attachment newer_than:365d"
          example: "has:attachment newer_than:365d"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GmailMessageSummary"
              examples:
                sample:
                  value:
                    - { id: "19913f5fbd4cb5fc", threadId: "19913f5fbd4cb5fc", snippet: "Dziękujemy za wiadomość..." }
                    - { id: "19913f5a7ec7e73a", threadId: "19913f5a7ec7e73a", snippet: "Załączam umowę w PDF..." }

  /gmail/threads:
    get:
      summary: Lista wątków (alias do starszych testów)
      operationId: listGmailThreads
      security: [{ adminHeader: [] }]
      parameters:
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
          example: 5
        - in: query
          name: pageToken
          schema: { type: string }
        - in: query
          name: q
          schema: { type: string }
          example: "newer_than:30d"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  threads:
                    type: array
                    items:
                      type: object
                      properties:
                        id:        { type: string }
                        historyId: { type: string }
                  nextPageToken: { type: string }
              examples:
                sample:
                  value:
                    threads:
                      - { id: "19920979f0112107", historyId: "123456" }
                      - { id: "19913f5fbd4cb5fc", historyId: "123457" }
                    nextPageToken: "Cg4IARIAGAY="

  /gmail/thread:
    get:
      summary: Szczegóły wątku (expand=1 pobiera pełne treści i załączniki)
      operationId: getGmailThread
      security: [{ adminHeader: [] }]
      parameters:
        - in: query
          name: threadId
          required: true
          schema: { type: string }
          example: "19913f5fbd4cb5fc"
        - in: query
          name: expand
          schema: { type: boolean, default: false }
          description: false = metadane; true = pełne treści (HTML/TXT) + attachments/inline.
          example: true
        - in: query
          name: raw
          schema: { type: boolean, default: false }
          description: raw=1 pobiera RFC822 per wiadomość (osobne GET /messages/{id}?format=raw).
          example: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GmailThreadDetail"
              examples:
                expand1:
                  value:
                    id: "19913f5fbd4cb5fc"
                    historyId: "123457"
                    snippet: "Dziękujemy za wiadomość..."
                    messagesCount: 1
                    messages:
                      - id: "19913f5fbd4cb5fc"
                        threadId: "19913f5fbd4cb5fc"
                        labelIds: ["INBOX"]
                        snippet: "Dziękujemy za wiadomość..."
                        internalDate: "1693812345000"
                        headers:
                          from: "Jan Kowalski <jan@example.com>"
                          to: "Me <me@example.com>"
                          subject: "Faktura"
                          date: "Tue, 05 Sep 2025 10:12:34 +0200"
                          messageId: "<abc123@example.com>"
                        body:
                          html: "<p>W załączniku faktura.</p>"
                          text: "W załączniku faktura."
                        attachments:
                          - filename: "faktura.pdf"
                            contentType: "application/pdf"
                            contentBase64: "JVBERi0xLjQKJc..."
                        inline: []
                        hasAttachments: true
                        attachmentsCount: 1
                        hasInline: false
                        inlineCount: 0

  /gmail/modify:
    post:
      summary: Dodaj/usuń etykiety na wiadomości
      operationId: modifyGmailMessage
      security: [{ adminHeader: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id: { type: string, description: "ID wiadomości" }
                addLabels:
                  type: array
                  items: { type: string }
                removeLabels:
                  type: array
                  items: { type: string }
            examples:
              star_as_unread:
                summary: Oznacz jako nieprzeczytane i dodaj gwiazdkę
                value:
                  id: "19913f5fbd4cb5fc"
                  addLabels: ["STARRED", "UNREAD"]
                  removeLabels: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:       { type: string }
                  threadId: { type: string }
                  labelIds:
                    type: array
                    items: { type: string }
              examples:
                result:
                  value:
                    id: "19913f5fbd4cb5fc"
                    threadId: "19913f5fbd4cb5fc"
                    labelIds: ["INBOX","STARRED","UNREAD"]

  /calendar/list:
    get:
      summary: Lista wydarzeń w zakresie czasu
      operationId: listCalendarEvents
      security: [{ adminHeader: [] }]
      parameters:
        - in: query
          name: timeMin
          required: true
          schema: { type: string }
          description: ISO8601 (np. 2025-09-07T12:00:00)
          example: "2025-09-07T00:00:00"
        - in: query
          name: timeMax
          required: true
          schema: { type: string }
          description: ISO8601
          example: "2025-09-08T00:00:00"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CalendarEvent"
              examples:
                sample:
                  value:
                    - id: "evt_123"
                      summary: "SMOKE TEST – spotkanie"
                      htmlLink: "https://calendar.google.com/event?eid=..."
                      location: "Online"
                      description: "Testowe spotkanie"
                      start: "2025-09-07T15:00:00+02:00"
                      end:   "2025-09-07T15:30:00+02:00"
                      attendees:
                        - email: "jan@example.com"

  /calendar/create:
    post:
      summary: Utwórz wydarzenie w kalendarzu
      operationId: createCalendarEvent
      security: [{ adminHeader: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CalendarCreateInput"
            examples:
              simple:
                value:
                  summary: "SMOKE TEST – spotkanie"
                  description: "Krótki opis"
                  location: "Online"
                  start: "2025-09-07T16:00:00+02:00"
                  end:   "2025-09-07T16:30:00+02:00"
                  attendees:
                    - email: "jan@example.com"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CalendarEvent"
              examples:
                created:
                  value:
                    id: "evt_456"
                    summary: "SMOKE TEST – spotkanie"
                    htmlLink: "https://calendar.google.com/event?eid=..."
                    location: "Online"
                    description: "Krótki opis"
                    start: "2025-09-07T16:00:00+02:00"
                    end:   "2025-09-07T16:30:00+02:00"
                    attendees:
                      - email: "jan@example.com"

  /calendar/notifications:
    post:
      summary: Webhook Google Calendar (loguje, zwraca 200)
      operationId: calendarNotifications
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:     { type: boolean }
                  method: { type: string }
              examples:
                ok:
                  value:
                    ok: true
                    method: "POST"

components:
  securitySchemes:
    adminHeader:
      type: apiKey
      in: header
      name: x-admin

  schemas:
    GmailLabel:
      type: object
      properties:
        id:   { type: string }
        name: { type: string }
        type: { type: string }

    GmailMessageSummary:
      type: object
      properties:
        id:       { type: string }
        threadId: { type: string }
        snippet:  { type: string }

    GmailAttachment:
      type: object
      properties:
        filename:      { type: string }
        contentType:   { type: string }
        contentBase64: { type: string, description: "base64" }

    GmailMessageDetail:
      type: object
      properties:
        id:         { type: string }
        threadId:   { type: string }
        labelIds:
          type: array
          items: { type: string }
        snippet:    { type: string }
        internalDate: { type: string }
        headers:
          type: object
          properties:
            from:       { type: string }
            to:         { type: string }
            cc:         { type: string }
            bcc:        { type: string }
            subject:    { type: string }
            date:       { type: string }
            messageId:  { type: string }
            inReplyTo:  { type: string }
        body:
          type: object
          properties:
            html: { type: string }
            text: { type: string }
        attachments:
          type: array
          items: { $ref: "#/components/schemas/GmailAttachment" }
        inline:
          type: array
          items: { $ref: "#/components/schemas/GmailAttachment" }
        hasAttachments:  { type: boolean }
        attachmentsCount:{ type: integer }
        hasInline:       { type: boolean }
        inlineCount:     { type: integer }
        raw:
          oneOf:
            - { type: "null" }
            - { type: string }

    GmailThreadDetail:
      type: object
      properties:
        id:            { type: string }
        historyId:     { type: string }
        snippet:       { type: string }
        messagesCount: { type: integer }
        messages:
          type: array
          items: { $ref: "#/components/schemas/GmailMessageDetail" }

    CalendarCreateInput:
      type: object
      required: [summary, start, end]
      properties:
        summary:     { type: string }
        description: { type: string }
        location:    { type: string }
        start:       { type: string, description: "ISO8601" }
        end:         { type: string, description: "ISO8601" }
        attendees:
          type: array
          items:
            type: object
            properties:
              email: { type: string, format: email }

    CalendarEvent:
      type: object
      properties:
        id:        { type: string }
        summary:   { type: string }
        htmlLink:  { type: string, format: uri }
        location:  { type: string }
        description: { type: string }
        start:     { type: string }
        end:       { type: string }
        attendees:
          type: array
          items:
            type: object
            properties:
              email: { type: string, format: email }
