openapi: 3.1.0
info:
  title: Jarvis-PL API
  version: "1.0.0"

servers:
  - url: https://ai.aneuroasystent.pl

paths:
  /:
    get:
      operationId: root
      summary: Prosty test żywotności (tekst "OK")
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK

  /health:
    get:
      operationId: health
      summary: Health check
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }

  /debug/routes:
    get:
      operationId: listRoutes
      summary: Lista zarejestrowanych tras (debug)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    method: { type: string, example: GET }
                    path: { type: string, example: /calendar/today }

  /oauth2/start:
    get:
      operationId: oauthStart
      summary: Rozpoczyna autoryzację Google OAuth (redirect)
      responses:
        "302":
          description: Redirect do Google OAuth

  /oauth2/callback:
    get:
      operationId: oauthCallback
      summary: Callback OAuth2 (zapis tokenów)
      parameters:
        - in: query
          name: code
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK (tekst)
          content:
            text/plain:
              schema: { type: string }

  /auth/status:
    get:
      operationId: authStatus
      summary: Status tokenów (tekst)
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema: { type: string }

  /auth/tokeninfo:
    get:
      operationId: authTokenInfo
      summary: Informacje o bieżącym access_token (scope’y, ważność)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  scopes:
                    type: array
                    items: { type: string }
                  expires_in: { type: integer, nullable: true }
                  issued_to: { type: string, nullable: true }
                  audience: { type: string, nullable: true }

  /auth/reset:
    get:
      operationId: authReset
      summary: Reset zapisanych tokenów (wymaga nagłówka x-admin-token)
      parameters:
        - in: header
          name: x-admin-token
          required: true
          schema: { type: string }
          description: Sekretny token administracyjny (RESET_TOKEN)
      responses:
        "200":
          description: OK (tekst)
          content:
            text/plain:
              schema: { type: string }
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /calendar/events/json:
    get:
      operationId: listCalendarEventsJson
      summary: Zwraca nadchodzące wydarzenia z ID (JSON)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        summary: { type: string }
                        start: { type: string, nullable: true }
        "401":
          description: Brak autoryzacji
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
                  details: { type: string, nullable: true }

  /calendar/event:
    get:
      operationId: getCalendarEvent
      summary: Zwraca szczegóły pojedynczego wydarzenia
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string }
          description: ID wydarzenia z Google Calendar
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "404":
          description: Nie znaleziono wydarzenia
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /calendar/today:
    get:
      operationId: listCalendarToday
      summary: Lista wydarzeń na dziś (formatowane stringi)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  today:
                    type: array
                    items: { type: string }
        "401":
          description: Brak autoryzacji
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /calendar/tomorrow:
    get:
      operationId: listCalendarTomorrow
      summary: Lista wydarzeń na jutro (formatowane stringi)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tomorrow:
                    type: array
                    items: { type: string }
        "401":
          description: Brak autoryzacji
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /calendar/create:
    post:
      operationId: createCalendarEvent
      summary: Tworzy wydarzenie w kalendarzu (primary)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [summary, startISO, endISO]
              properties:
                summary: { type: string }
                description: { type: string, nullable: true }
                startISO: { type: string, description: ISO 8601, example: "2025-09-01T10:00:00+02:00" }
                endISO: { type: string, description: ISO 8601, example: "2025-09-01T11:00:00+02:00" }
                timeZone: { type: string, default: Europe/Warsaw }
      responses:
        "200":
          description: Utworzone
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  htmlLink: { type: string }
                  status: { type: string }
        "401":
          description: Brak autoryzacji
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /gmail/messages:
    get:
      operationId: listGmailMessages
      summary: Pobierz listę wiadomości Gmail (ostatnie/filtr)
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Zapytanie Gmail, np. newer_than:7d, subject:"faktura", from:adres@domena
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        snippet: { type: string }
                        subject: { type: string }
                        from: { type: string }
                        date: { type: string }

  /gmail/send:
    post:
      operationId: sendGmail
      summary: Wysyła wiadomość (HTML +/plain + załączniki)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [to, subject]
              properties:
                to: { type: string, description: Adres odbiorcy (lub lista rozdzielona przecinkami) }
                subject: { type: string }
                text: { type: string, nullable: true }
                html: { type: string, nullable: true }
                from: { type: string, nullable: true, description: Zazwyczaj puste – Gmail ustawi konto nadawcy automatycznie }
                attachments:
                  type: array
                  items:
                    type: object
                    required: [filename, mimeType, data]
                    properties:
                      filename: { type: string }
                      mimeType: { type: string, example: application/pdf }
                      data:
                        type: string
                        description: Czysta Base64 (bez prefiksu data:)
                        format: byte
      responses:
        "200":
          description: Wysłano
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  labelIds:
                    type: array
                    items: { type: string }
        "4XX":
          description: Błąd walidacji / Gmail
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        "5XX":
          description: Błąd serwera / Gmail
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /gmail/reply:
    post:
      operationId: replyGmail
      summary: Odpowiedź w istniejącym wątku (ustawia In-Reply-To/References)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                replyToMessageId:
                  type: string
                  description: ID wiadomości (z /gmail/messages), z której pobierzemy threadId i nagłówki do In-Reply-To/References
                threadId:
                  type: string
                  description: Jeśli znasz, możesz podać wprost. Wtedy replyToMessageId opcjonalne.
                to:
                  type: string
                  nullable: true
                  description: Jeśli brak – backend użyje Reply-To/From z oryginału
                subject:
                  type: string
                  nullable: true
                  description: Domyślnie "Re: {Subject oryginału}"
                text: { type: string, nullable: true }
                html: { type: string, nullable: true }
                inReplyTo:
                  type: string
                  nullable: true
                  description: Własny nagłówek In-Reply-To (jeśli chcesz nadpisać)
                references:
                  type: string
                  nullable: true
                  description: Własny nagłówek References (jeśli chcesz nadpisać)
                attachments:
                  type: array
                  items:
                    type: object
                    required: [filename, mimeType, data]
                    properties:
                      filename: { type: string }
                      mimeType: { type: string }
                      data:
                        type: string
                        format: byte
      responses:
        "200":
          description: Wysłano odpowiedź
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  threadId: { type: string }
                  labelIds:
                    type: array
                    items: { type: string }
        "4XX":
          description: Błąd walidacji / Gmail
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        "5XX":
          description: Błąd serwera / Gmail
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }

  /drive/search:
    get:
      operationId: searchDriveFiles
      summary: Szukaj plików w Google Drive (po nazwie)
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Fraza do wyszukania w nazwie pliku
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string }
                    name: { type: string }
                    mimeType: { type: string }
                    modifiedTime: { type: string }

  /places/search:
    get:
      operationId: searchPlaces
      summary: Szukaj miejsc (Google Places API – New)
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Fraza, np. "kawiarnia", "pizza", "siłownia"
        - in: query
          name: lat
          schema: { type: number }
          description: Szerokość geograficzna (domyślnie Warszawa 52.2297)
        - in: query
          name: lng
          schema: { type: number }
          description: Długość geograficzna (domyślnie 21.0122)
        - in: query
          name: radius
          schema: { type: integer }
          description: Promień w metrach (domyślnie 3000)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  query: { type: string }
                  lat: { type: number }
                  lng: { type: number }
                  radius: { type: integer }
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        place_name: { type: string, description: Resource name (np. "places/ChIJ...") }
                        displayName: { type: string, nullable: true }
                        address: { type: string, nullable: true }
                        rating: { type: number, nullable: true }
                        user_ratings_total: { type: integer, nullable: true }
                        phone: { type: string, nullable: true }
                        website: { type: string, nullable: true }
                        open_weekdays:
                          type: array
                          items: { type: string }
                        location:
                          type: object
                          properties:
                            lat: { type: number, nullable: true }
                            lng: { type: number, nullable: true }
                        types:
                          type: array
                          items: { type: string }

  /places/details:
    get:
      operationId: getPlaceDetails
      summary: Szczegóły miejsca (Google Places API – New)
      parameters:
        - in: query
          name: place_id
          required: true
          schema: { type: string }
          description: Resource name (np. "places/ChIJ…"). Jeżeli podasz stare ID, backend doda prefiks "places/".
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  place_name: { type: string }
                  name: { type: string, nullable: true }
                  address: { type: string, nullable: true }
                  phone: { type: string, nullable: true }
                  website: { type: string, nullable: true }
                  rating: { type: number, nullable: true }
                  user_ratings_total: { type: integer, nullable: true }
                  open_weekdays:
                    type: array
                    items: { type: string }
                  location:
                    type: object
                    properties:
                      lat: { type: number, nullable: true }
                      lng: { type: number, nullable: true }
                  types:
                    type: array
                    items: { type: string }
        "400":
          description: Brak place_id
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
        "502":
          description: Błąd z Places API (New)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string }
