openapi: 3.0.3
info:
  title: Jarvis-PL API (Public Minimal)
  version: "1.3.0"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://ai.aneuroasystent.pl
    description: Publiczny serwer produkcyjny
security: []

paths:
  /health:
    get:
      operationId: health
      summary: Health check
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
        "4XX":
          description: Błąd po stronie klienta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /oauth2/start:
    get:
      operationId: oauthStart
      summary: Rozpocznij autoryzację OAuth2 (Google)
      description: Zwraca przekierowanie do ekranu zgody Google.
      responses:
        "200":
          description: OK (opis informacyjny dla lintera; w praktyce endpoint robi 302)
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirect:
                    type: string
                    description: URL do Google OAuth (może być zwrócony alternatywnie)
                    example: "https://accounts.google.com/o/oauth2/v2/auth?client_id=..."
        "302":
          description: Przekierowanie do Google OAuth consent screen
          headers:
            Location:
              description: URL do którego należy przekierować przeglądarkę
              schema:
                type: string
        "4XX":
          description: Błąd po stronie klienta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/status:
    get:
      operationId: authStatus
      summary: Status autoryzacji
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthStatus"
        "4XX":
          description: Błąd po stronie klienta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /calendar/create:
    post:
      operationId: createCalendarEvent
      summary: Utwórz wydarzenie w Google Calendar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEventRequest"
      responses:
        "200":
          description: Wydarzenie utworzone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateEventResponse"
        "401":
          description: Brak autoryzacji
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "4XX":
          description: Błąd po stronie klienta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /drive/search:
    get:
      operationId: searchDriveFiles
      summary: Szukaj plików w Google Drive
      description: "Obsługuje paginację (pageToken/raw), eksport CSV (export=csv, allPages). Dla parametru namePrefix backend stosuje dwustopniowe zawężenie: (1) seed po stronie Google Drive: dodaje warunek name contains '<prefix>' do zapytania, (2) ścisły prefiks (case-insensitive) po stronie serwera oraz prefix-aware paging — kolejne strony są skanowane do czasu zebrania pageSize trafień (limit skanów: 20). Dzięki temu pierwsza strona wyników zawsze zawiera faktyczne dopasowania prefiksu."
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Fraza do wyszukania w nazwie pliku (name contains)
        - in: query
          name: fulltext
          schema: { type: string }
          description: Szukanie w treści pliku (fullText contains)
        - in: query
          name: namePrefix
          schema: { type: string }
          description: "Prefiks nazwy (case-insensitive). Backend dodatkowo seeduje zapytanie do Google Drive warunkiem `name contains '<prefix>'`, a następnie filtruje wyniki ścisłym prefiksem oraz skanuje kolejne strony (prefix-aware paging), aż zbierze `pageSize` trafień. Limit skanów: 20."
        - in: query
          name: sort
          schema:
            type: string
            enum: [modified, name]
            default: modified
          description: Sortowanie wyników — domyślnie po dacie modyfikacji (modified), alternatywnie po nazwie (name).
        - in: query
          name: sortDir
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Kierunek sortowania (dla modified domyślnie desc; dla name domyślnie asc).
        - in: query
          name: type
          schema:
            type: string
            enum: [pdf, doc, docx, document, sheet, xlsx, spreadsheet, slides, pptx, folder, image, video]
          description: Filtr po typie. Można też użyć formatu mime:<typ>, np. mime:application/zip.
        - in: query
          name: owner
          schema: { type: string }
          description: "Właściciel pliku. Użyj 'me' lub adresu e-mail."
        - in: query
          name: modifiedAfter
          schema: { type: string, format: date-time }
          description: Zwraca pliki zmodyfikowane w/g lub po tej dacie (ISO 8601).
        - in: query
          name: modifiedBefore
          schema: { type: string, format: date-time }
          description: Zwraca pliki zmodyfikowane w/g lub przed tą datą (ISO 8601).
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
          description: Liczba wyników (1–100).
        - in: query
          name: minSize
          schema: { type: integer, minimum: 0 }
          description: Minimalny rozmiar w bajtach (filtrowanie po stronie serwera).
        - in: query
          name: maxSize
          schema: { type: integer, minimum: 0 }
          description: Maksymalny rozmiar w bajtach (filtrowanie po stronie serwera).
        - in: query
          name: export
          schema: { type: string, enum: [csv, json], default: json }
          description: Ustaw na 'csv', aby pobrać wyniki jako plik CSV.
        - in: query
          name: pageToken
          schema: { type: string }
          description: Token kolejnej strony wyników (z poprzedniego wywołania).
        - in: query
          name: raw
          schema: { type: boolean, default: false }
          description: Jeśli true — zwróci obiekt z files i nextPageToken. Domyślnie zwraca samą tablicę plików.
        - in: query
          name: allPages
          schema: { type: boolean, default: false }
          description: Tylko dla export=csv — pobiera wszystkie strony wyników.
        - in: query
          name: maxTotal
          schema: { type: integer, minimum: 1, maximum: 10000, default: 2000 }
          description: Limit łącznej liczby plików przy allPages=1 (CSV).
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items: { $ref: "#/components/schemas/DriveFile" }
                  - $ref: "#/components/schemas/DriveSearchResponse"
            text/csv:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Ustawiany przy export=csv; sugeruje nazwę pliku do pobrania.
              schema: { type: string }
        "401":
          description: Brak autoryzacji
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "4XX":
          description: Błąd po stronie klienta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /gmail/send:
    post:
      operationId: sendGmail
      summary: Wyślij wiadomość e-mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendMailRequest"
      responses:
        "200":
          description: Wysłano wiadomość
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID utworzonej wiadomości
        "401":
          description: Brak autoryzacji
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "4XX":
          description: Błąd po stronie klienta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /gmail/reply:
    post:
      operationId: gmailReply
      summary: Odpowiedz w istniejącym wątku Gmail
      description: Podaj `replyToMessageId` lub `threadId`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplyMailRequest"
      responses:
        "200":
          description: Wysłano odpowiedź
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID utworzonej wiadomości
        "401":
          description: Brak autoryzacji
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "4XX":
          description: Błąd po stronie klienta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Krótki kod/typ błędu (np. drive_search_failed)
        status:
          type: integer
          description: HTTP status związany z błędem
        details:
          type: object
          description: Dodatkowe szczegóły błędu
          nullable: true
          additionalProperties: true

    AuthStatus:
      type: object
      properties:
        loggedIn:
          type: boolean
        refreshToken:
          type: boolean
        scopes:
          type: array
          items: { type: string }

    CreateEventRequest:
      type: object
      properties:
        summary: { type: string }
        description: { type: string }
        location: { type: string }
        startISO: { type: string, description: "ISO 8601 lub YYYY-MM-DD (całodniowe)" }
        endISO: { type: string, description: "ISO 8601 lub YYYY-MM-DD (całodniowe)" }
        timeZone: { type: string, default: Europe/Warsaw }
        attendeesEmails:
          type: array
          items: { type: string }
        createMeet: { type: boolean, description: "Jeśli true, doda Google Meet" }
        sendUpdates:
          type: string
          enum: [all, none]
          default: none

    CreateEventResponse:
      type: object
      properties:
        id: { type: string }
        htmlLink: { type: string }
        hangoutLink: { type: string }
        conferenceData:
          type: object
          additionalProperties: true

    GmailAttachment:
      type: object
      properties:
        filename: { type: string }
        content: { type: string, description: "Treść zakodowana (np. base64)" }
        mimeType: { type: string }

    SendMailRequest:
      type: object
      properties:
        to: { type: string, description: "Adres odbiorcy (lub lista rozdzielona przecinkami)" }
        subject: { type: string }
        text: { type: string }
        html: { type: string }
        from: { type: string }
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/GmailAttachment"

    ReplyMailRequest:
      type: object
      description: 'Podaj replyToMessageId LUB threadId.'
      properties:
        replyToMessageId: { type: string }
        threadId: { type: string }
        to: { type: string, description: "Jeśli brak – backend użyje Reply-To/From z oryginału" }
        subject: { type: string, description: 'Domyślnie "Re: {Subject oryginału}"' }
        text: { type: string }
        html: { type: string }
        inReplyTo: { type: string }
        references: { type: string }
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/GmailAttachment"

    DriveSearchResponse:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: "#/components/schemas/DriveFile"
        nextPageToken:
          type: string
        pageSize:
          type: integer
        q:
          type: string
        

    DriveFile:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        mimeType: { type: string }
        modifiedTime: { type: string }
        webViewLink: { type: string }
        iconLink: { type: string }
        size: { type: string }
        owners:
          type: array
          items:
            type: object
            properties:
              displayName: { type: string }
              emailAddress: { type: string }
